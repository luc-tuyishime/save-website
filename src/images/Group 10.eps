%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.1 (Build 17B48) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 99 39
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 99 39
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: VFRGTN+Gotham-Light
%!FontType1-1.0: VFRGTN+Gotham-Light 001.000%%CreationDate: 11/27/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.000) readonly def/FullName (Gotham-Light) readonly def/FamilyName (Gotham) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -123 def/UnderlineThickness 20 defend readonly def/FontName /VFRGTN+Gotham-Light def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /C putdup 34 /o putdup 35 /p putdup 36 /y putdup 37 /r putdup 38 /i putdup 39 /g putdup 40 /h putdup 41 /t putdup 42 /copyright putdup 43 /two putdup 44 /zero putdup 45 /one putdup 46 /seven putdup 47 /space putreadonly def/FontBBox {-67 -168 1145 898} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B9053DB02054E3D28A3724F4C481B7034E0E464B032A5489DA1F9F68288FEB9DD6B5032C6E29EDCEAFF0F7C6A56CDE317B1040578DB9582A07A6E9AF81623F3E0F2A7EB95EA6F1C49CC6E015C93CAADB9EC0E3C2DECAD4D36272C347BC5B5A8C6B90EFC856D536513E5F350CADAAD5CC4539AE2B6F527EAAAE5B6957CD40F386A574F7F79ABD08AF947FD0DCD3E3CE3BC67BCA6202F63774E98663893394C81E75501AA08F03BFF0DDB0BB53E2A4970B887DD8C6B17A9FF0C6946FB9FC86A718C5D878FA0BC66EDCF431B187B2E9753652559267A6747D2E3F5920FE0FFC023461F3ED85479E557695D3C6272244FBBEA1B2743ED2FEF57C7ED2C16DF032B6B6F37875C568D97677121BEC8E22DF426B1DEFBC9687752B15624C1782DBDF2402052AF18E8B2857A4F5191BDE88E0D5F902853DE2584DCA46D2B128CD30A3E2A55028021B2F1120AA8540EED5ED8414E1B46890E7B547FC020C01966D425B8EDB6B165389206B4ADA1AE546F7140BD0D84482FFF79EDE007682A5D94184B21567662F32F3828D058BD5AE1469D7F5DD5E498BCBC6D5B1B59FCF6A1E8F9D5B45DC394F720F3F68A5FF26FA94922FFFC668107BB9F828E9189DF2DC199C3CF8C7A39C21318F4B1F8BE51916D119B1141067B19AB53E33C01B89A0C969C9E9D48414D4235B50CAB6A5A8FA2332224919B02EA4FAF4E905573475DAD47065C3DADC38DAC669464E36D62CB4DEBF7A1BE94F9A27302E8F4D5CCAC483513D96404DEEEE088E5AD5F4D140E6EC9DDE32E7EF07BEF2507ECA62DA40F6E3FEF81D1F129AB74C4AB7D8070D39BDBEC286F67B2E77FF0ACF0D6700D838765CF3D9C8B1CE1CD61EBAD5261395C26E90C4DED3291E3169F9F9AA8CE30223CA0C8630BBADC5B87CDC11820A7C7BBD89CDFE68F9F77275DAFE9A0CB3C732655B3123F1ABB45E42084EAC894FE335C07324849C9736D00C872C4551997DB889AF17AA52C5AA77DEB548B0103B77F65717F70B90C1CC8F616A8D9876C7D4E752FD21A10BD5A9B88727723440D52D9F128684992966A51F60AD99A07FD30FB5590355AFB751DB20D6D8538A301660844A9FBF54E88B29A623AB766E2FB146B14BB8DE74339DD29025F5E73464DFF46AB77F152FF9A7F7AA365B4A298B30E369AED5DE376B6FF92385F3F19A47848D3918B73E89E05A34671FC14800D03E802B862CAD6205557B938CBB9BB492874906110D102715F881CB59B2453E7E8B257201101217BCBDA9FF8D4632900A4EA3F916CE637CD3D03288086DB296161232AB982D1BC1B794C88E29E8B709D461F903DD3F342EF54F0D13E23AABA5D4C7825FA81F656E7EA350B8321E20245AECA530423EA5A6AB93B0125CA501221685610F3108A6E1B1660F15AD4A548A501779E2200301E87F22069B1F73E2670AF1748B350F7419A63550D7624B003EA502D7681F3690C2107E38C2732F049F313455C1720EA9CA677943BDC0C619619528ECC77F85529A067053916B2FB4D46CD1360923EC89A8DFC0C6BCC42ED30CC358DB88D63C6933ED89DDCA036DF0987A2A1D842B468C2E4835D9CCA3E070D1633698A6C0F52EB20B2DA97706D53E9F58E1DB10F5201920A5249E9ADEEC869BA01EB7D1AEA3C66F0D78D6C9AEFDEB75A33FE571F482BA1583C4FC19AC49BF9EAB220AF92B0ECB2CD2976F9E59069E22CA4ABEF1563C7BD1180CA1A553DAC49E746E8F21763FC2A827F521550E79674490E417347DFE95DA8DF0A9E950D7098680ED2CA58456E0E09512361664224337231A380A7B601863D1DD65CA20F14367E5D1D07ABA0CF1613ADD00C96CAA503DF7F427B5C83E567DBA4CBA790BCD6CD33CA1FB606898A45B39456331CF63BE7FD104137CCC83C095E401E7AEBFA0F15AF2A6889FED17727F9AAA65A97335354F1ACBAA9776E8B842C638B1FA28BA78EB750F58E88C2F974ACA3474290C3E39090D7AC548E62B823376178AC5113F249D01060D0CF07D5E505C96C4ADF5981B6C04C9465975E9DD53D8B32491FA20D11FB818E96945BC3A5F6905EACCC4AED587F5E3B97ED674605ACE3E809C019AB6D144A92F816709E63E474D39564EE37A4E65DFD566D5B2FB9DF1AE99209370666DB5857FD9EED37654D0BB14EC3B4E415BC62C3D5B926723CE182D44BC1B90E2949E685BE717B367A65D5433150BFED56F914C53EDADD824C7D606CE3F001D76B063190185F5A5955D0B7819F737DB377E49558208C64E453D17B543A408BFD1338CF53C3F80E8AC1146A48FECC7F96FDA4E435B9B6F49EB07BA7715BC1E42B3F61B57CB654713F79F0391BBEFC0CA2683D2521EDCE2CA91B8321B6EF7C5ABF3AA472838B8ACD9621793EE74897919A4C83924AB4A2C612BDB4F5B4498AF31195D20D2A0CEEFBCB9F6D449F60904BA894DE6BD362DD2A30E7A7BEE0F8C733D2CE0261CEB5C2317B45CBF165A2AE2F58905D1966F2F4F2E6E01E44E44F79AAB5D0064D8064414133AF7D3FF9D1781E91401179CA4D6CBE220DF5052879F31121252034F72F10082915556924C06D73BFC8E4AEE373B651677F3460BCE4383985E76137CF29FE43671A1D7B29DA6E3FA5B160B874935CA0D76D052DD673D36DA41ED68E776DAE4043FB47CB62D4498AEFD058A235E64C97786E4F4F423B398A3CAABF6F59B03F621C54C8F934BBE2B12A1E95BD0DB423F1CDB3816414741BBA066175FEFC68324A390CD90214A3E17E5B2177A462255F7D24E3E39899BBCC1E23F4AB74D03B5F1D92B38050268F31CA2DB6F2A81596C013CE4628A0DE823CF25D2FEE55FEFC079ECBA3A88C77A75FFE10103004FC802C4EF8CC628BE720C491FE9350BACD9CFFA93FE2959C440FFD4CED5E902CD32F963A3FCA19EF9CF252B8AF2336CC4D1A840AF011223BE5769B94E5221C313AFA7A299098CEA09C748D0A84EB7CB1052B67220C869047FAD18D90ED9BEDAF46B85D4D18B1538C23859F97270DEB62429E02CCCFE96BAD588F5B7BBC736EE0D2D83EBB765C286DD1E30C0E4E827BD5FC6258C0C33EE891A969F7B02DC1CAA0BF9DF34DF0FF3C37054E408E7D2020B6FE888560109FC269010955A5AEC495860DAAEDC9B8FBD7BB4E73E1B3275AC206B46D3E0047DDBD20EFFFB45BD39E26C62D30D257D26D1BDD125B79A32392046E4796D53E83C0740575168A6FB495B7623B14DA3705C3D7C344ECBF5F5B231EF68F848F5001A60F5C4D03FD773082B27B4090B64B3438E7258CB1D1D17E9C20EBD0CB5CEEF1A29E41F5FF325A62FC160FA41D18E2D419396A3B3AD8A4F38914BF538B269647B1A5A29298581C95B95560E8535786914BAE265CD0A107F8F3D2A3971D215E592BC3C5ACB8FBC9987EC8B0A154A4D1996A4F19E8488B267DD1C550B56AAB65AEBCF76E49CC738FAA623941F207DB952D9300942D7D301FFAB4AEF33660C823C3356FCEBAF5D4EC020BC1C68864E33F9B5EAA70AF5BCBF72CFD6AD4C8C3C8ADEE5F9C4179C38719D7421BF8EA031E0058F96D48D05B220DF833A28661E2BB8E976287C03ECE834B23E0043C6663071B0C1FFEE8722C1E082D98F3F271D5152EF89A84C4631DC1EDF9DA8485E7352D018F4D1B2896AB0EEE07D218266ABEB33579BBDFC4C477DB43917FDA0B3C60DC2D88DBA22878CC3C18EC3E0401ED327EF164B4AF0D4E626E23E53B2F95E6F57F39CA3D2699D90BBC44E5A74D5583B497715944743DA1B7600744C088B4C5C9015BA0BEDA26066A259F0D783E25D44BC48AF6228670C1A113CF24585E47EBC1672421022F5DB95E3127CF22C70FB688BACD253026A2BC902E4411085606C3F89D57ACFBF4A7937DF00EDDCACA809C8106846AC706291C10E88B9D3BB2A9EC18EF439CEFAE4DC0823D54D8C284A88E66104C5165CD78A5DC0ADCE6B6BC37E93CE8774F66934694440869BABBB84B50A9B129A971D78EEE40B08247EE30EFAC0608CDC89932AF698878A2EBCF9AACC2A3756BEB70489AFBAC48E5C557BE48426B1289B8E8A576B27C9D8B25081D2581F31134C29703E56B0703C58644FFE8C0F8BEFD28B51DC15B5F5E0075531A5CB0D82AA47C50A12939375627A6AEBB9E8C0BCAF274173A77A41969EAE1A6F2564A550A7186DC52300A0604C199B5C401CE0BB6CDC2E41402FCCB7AEC8F147A0817A1B41CA3772C092F6BD50BA13C3DA0F87B332D4CAE50FC61371AC6FA43B815DC34B34F760542FA104FD02974510EB16DA0E3D64D2484EBFA8D589ED0B6BE15E023FCE8A608F31945261574F17582F627962C5F52976C9BC778CE0371D3016A1D22BFF39237C685D7439F046728A6CE91E98EED8713C2DC259CC67C972902DF8AE879462BAEAEFC56240F73BC38C43826435181797EC4C58BD64AC804A62C0594AB101EE8C4E1406F582B3C37197BCEF97D4FCBA75CA229D8FE7EDE94C7D6E39E51FF8A9061C71C178F843A98015483F060769AEF47057177C18C599E7DB13A7CD6068916FA189EE1379D86438DFD9BD6B908A6D576A02F90C506B737C9FFCFFBE3D592B4347AA24488A27B6BC8B482F0F4B667F6C463A76E09CABEE2138AC1A22F9104F93585E2CD29B7D450C36B4AB55560CD050A4525C609655893D0912D2B7C16C561DE198DFD87A69D82B62D81C7981F2B2DE6A4DF29DA555180797B45A336A9D541B06A0BB55A9EC72F10945AB04BB177EA105E9E03D6E617E9716E7CE43B72F5366F653C0B896B89F8A9B0463329BF0FBFA97F5B01CD59C7636A6490A4668E9932BF4D04AA10368BE9AE537D15E4857FAE9AAF227F46754CCBAE039AFEC777C0D26221B1DD7409524F5B318C95337DE084DBB09926F3554C918149875C09376B6157016D9EA54DA18DF1951318F53F0F8DDF683D5894F4930DEABB1E951671B39D423018B491755F7154DC823C490633A876F1E4C57C2BD0CAEF7926A8F6588D2FEEC61C8BF173D0649E8890AA51B926B7CCD3C1B3B7AAE2D6C61A3EBAE9764DA68289E8F5F9D8897D71831D84F2DD90CE29E4EA3E5DA9CA8CE6A78C67E7FBBC07EDFCAA0B8437CD965A11796F742B890DD7CD2CFBDDE2886BBBA55565C8F443568DEE6D318E045EDDAED7365B1A1396CFA537889FF92DD08EFEABFD1F3862F621AA5E2A5714A2F420BAEFD70580BED62CFEE5BC516CD5D97ECBF6F0939CFE3C9084BC3DA62A15ABE7D9E0D4673C8C19AA04286B3E0362813A89B0E65C9245BC81359AD8D06A4CA80C7BA4E27DD85708860663A9096ECC53C8FC8CD5FB2F6C5C1F4C45F061394E3AE298FF7FF752039C3A647C82AC83305C24F9F574C536FD051774E38230274151DD04249F5D69F0557E4CD497C2E21F6BB5A0B088517A2A7AC5E9B7903DA9E13DCD7A93D63A1142B2C1D8C0C8E93105B7DAD2C4305DFC1662B7D1321DDA667FF72343CAA669B8734275A3CFDE804F49F385A8E7160B565B8F96A8F35DBC67A8CDB5027E3AC04E131450C221185F7BB44EE5C3E4707C093D459FA4B7CF28456E3359BA42560E881B123AF0EDA1D9F99017E9F1EE3E146CE0FCC8FAEA9F2FAA5596F1D92E38D5A78C3E6389A6ED1A1E840FAAD893519CBCD61FCDEFAFE2A8C0BD187E37652ABC8898E8E5A068C865FB033AA9577C7035ACECBC89C5C8BCFE0B8968AF533384DC00ABF5BC65B4A32901F0381026EEEE795D7638AC4CFB210CC891B4E241BB2A73A7A46A938014122833F537A7D779B87D1352B533E234C992FE92CA6DE54BA561CA4DBA6DFBCDFF5132934AAD34D8958944F7F07EAC1912320B2F9877D8D84B5A55DD815E9C08FF20C079294F625A27A4C74182E54A778D551A6C8238D247553667F6E8DE1F34E6B710C7BE96C98C2B9F73CB1D9651B5666CBB319C07F23380CA701B0C053E15E0EB13BA75AF3FAE84F47E6FB798DACCB8C828A924C00FD719166D9216F2A7123C7024F998F81456330C068C8BF4A676BE3766E6C7B7F8C1F6FC77E67E61199A0FF248B979D510787827BBCEC8E7C9FB1D1F4AC6D705CB132ACD9B3E09137AB6B9EE060AFAE78E54795242CB1950E069A31B38AECE11802F7B273178D6AB25C717C01B6A64FA7325D9A9A112F5EFDD1C42C5BA36815B40AED90D8AEE3075105C843877BC86C829D5B34367E8867C29794CFDE04C5E76EFA32030B291285F24705C89B54DFA640455CEFA6EFF8CDD9DADF702696E366FC4BB99C0A78BEE0699F692134836E80467C8F59DC148430A77E43356B90BDBC1949A1F3E022ED858CCAF5CB77F183CD6FE9E2B56D400D71C5904465DC48A9EBFA147A6F21FA7257A291FB9B3FEC940CC581765A49A663B807326BEB3BDB5944DB2DD3FC2ABD20EF5670C67D7CDF1F228653BD069496D119C5682C29D8BC4319754972155CBF633193D0F534BC401ED9213BA7931A8891B79E112C4462394C8B5A8118005A5EDD88CA289BD6EA5E6C33F3FEB317B07C3ABC8AF19D4F0076F75A846858BA5C685A3E7D77FE34E005E6FC595E65031870825482108D20C04FB60052505676E38AAF13A14B02884131C51B5AF789EBAAB3316A6B158405D7BC8312632DDA3C165FA832DCDF32074B95D72FB1CB130CA34A26F75FD28B0C9AC38AABE015BC06AC671460A943905110FBEC223B2E9E77B8B06EB75661FE0137BFD2783CFAE98B8644E52FFAA1C3A6ABDDE5CB16E431587778F2763290856B851E3076D9128B09353FC47FFBFFE4A97ABD72D8BF695D6D7F4B8A790DEE655B9F42A2D5CC58C26E9E34327984CB7D61858E8C10ECEB490F3096CC540AECAFDA848EF41A4F4C6E9DA1BAE9B0E3FAA83BA5CB68BAEFED925D072726665BA9D9AE1429EA13986F644E677B5246F6A000FE2F5FCEF37A7B575692A1861A6E34937D9D8AA416202C5510A7497D926C6CB21F58A67BF030412D507DF3564105AEA529D33E4246446718A8FDBDACAB3496843AA6EF54A81CEB5C1018AEEF42002AA68BBC864E7E787C21E3D8CFD8305E64971B0DB4CF0DAADBE373335DF7D838A23196945BB39813CE23F009DD3AABD6060574524125F2CDEF136E144610DCDF50ED2083ACFD15E71B86EB0CE797CF8B1F0F8F148A8E212723E05EFD2803092F8C871402385D792CC2FCBBB8C48FA451A1CA2FA5E826A9C6F898957590D77341103124C6614675F4DFAEB7BA29484C65BFD439F2F22AF82A7630CB5F76A0DC74F8A5F725BCBC23806F3BA87B2D2E4616EF2DE3C3749314ECBA1A3FCD4B32E000DF01C4C3E4EA2AF15A89AAFA0BFD965D751EECCCB8C47B12627D02602B79300580C4B2E2B18885D3066AFC3046514F0182AE4588246828CE47F3A64EC93B10F216FD0F2B86D0D64D317B70E45610A9C683064FA75AFBA1CC8CC39370B2C3F28ABB5816D4BEDEB004473F60213722D43B3CB2ED48A877FF5E2FD7D4B747F1114E2BCFEF82FE8AAACC3E4476FB2238A399C9008E3869A156B1DCBC5F7F8E24E77775FA3DCD7AA6EAD93A2B942FF796507BC0F67B045BF0B82C06FAB13F3973723BFC29FDE3BB6AC080E155D17D6CB3CC041B9E4EC7B43443F65AE3CBE401FF2EE130B54A981CAD13754DB42FEB9844018FEBE89F78C6084D3EB7090B041C306A54C8A5189D2ABEE6E88F01BF00DB0F860B2C5B726BADC33CEABFB0AE7E45A3F9B610BEEB27D3897B6A74D695C2A5C530E0D9241855349EFD99CF6431B58D0077ECF8B728C312E6078ADE60228B0EEAF36DDE699306C00C2C0106ED7876B8C59B786DB6E9ACD019C4C177BB46144719518C8A3776493AF2B5CE7BBC14F9D6883270810A04EF539D043D579ECA7ACB5792C43520D71AC9D27C89B69970FB1C8313B01CEC9BCE69715B14CB4438778D2213CA6DC3A623B7B18B37BC062762DDA05DF750032F705BC2A9F40674E53BF077361DE9B727D129CF9AA6AD59D755750CE11B4892F9EF2C32B53258BEBB6E5C96BB99CECD5E717A506A692DE76EBBDA80AC0E8C4B87B1B8772B281609AB911A38ECC991B61ACB6AD78E673C767BEB33B476F2D8CC6A6EFAEF4C0D6EEE0855A2D74B083F7AFFA84A2A20F942ABAA47C59A5279E16065E2DFC4885485BC46516F2DAFFDBD6595605C45467594BB6BD224F9E5531C99320049B3FCB8EABA5056785E2A573D6AF386280FB1E7CF0083B99752E7A0FD712CA66ED4677A8E97E866DF89959D51CE4D48FCFF3A0007B46B654F8D5AD17CA0DD9C2738B9D42E34F8191565BC243C1C226BC66C0C6922C266A250F00C5F3404AB6785FEFFC0861C0A11CC234C11575D8FCF3221A291A2308A79970C14AC5DF6B657DD01DF1A1FEEC9C7102F554E98FAF444BC0F0B6413995934DF09513065B969C403083E5386B9FD1F26CE997992C0F74282A64D4D6EB99CCDCE95A4E7D07FF649AA64D1206AB59C5FDBD447C558BC17EA7CD40B7E302327922231393A3D0433F50DA9C58ECF71FE9510148DD8596150B8614DC1ABD1CB7110C69A74CCB7779A9BBC0CC4B1C8EA1A9C17C7DC687D0FF2E18C2F6EAC6D1CB9BDF9E758C734A1B42E46ED799102EEA38415A4785659DE39DA7237FE5064C47440EBBA87BA55FECC4537EE0A5911C6955983D756DBE386A4DC43CFEF31BC7F9DD5E1D0E82C2A746971956BBD3C795873FBD09C2C8091D833AAB18A5DFFA165073315F1672EB8B8E515361EB914A6B1A93884E8980FF97C3FC1056A365D7A3D3D5FD65432A26138238D2BF4CADF9B2D7B1B62A5D7C886D824063040082385DF1C5D1849CC891CFAC562344DCC51B2FFE5A9BE30C73B688B33CE15C97BC7DCABF058ADEB91CB6512A3EBB4427E905D6BB23BAA3FC6560DCEE00EC65129A88D5EB5187C7B8A8A8C3C24E40CAFF55F78A18E3BE560C358C6C759EB4EB6F014C83AA9E1AA2BEA8A7F25CFFD3EA4B8197CAABEEE7538855A39DC64E1BA76A740C7321BDBEBB18090538C0D6DB518D0170301CD00EEA96311B5ABCA3184653BF88E925E9C649C42E811490045CD9FE1FC46407A0E6F93585F5A8E54EDF6BEBF608DB44E85E982CE1A74A0C68F2D64ED65F468A51513C6C8C6301B3340843D1A56ED3175437586ECDF77E2362648614194ED0BF643095CE70BFBD4429A52C47B14AF203AB2CAFE9AB97F7BDABD37AFB6508CDA90F43875281A27165DB28962E325F64C09CE458F6826B8E826CF07AD7472FCE626EB2D8BAF125532EF9D76A4B15C98C1FB7D3568E508272F50D3D2E757F3B4C1B3AF19C447B8E097B5576DE5FBBCE92C7272383D7526CEE1C972B4003C83104B592FC151553A3AF8A89A77A0F169358B2CF8034DA13AF869C7EB0400902BC08B2D05071DD4623CB52E31D4A4C95EF7C0813FC7EC767C69B4E01781FDA6613B8B584E422AB800D251DC6590C170A9675DF06E6D8D08E6006DA8853FCBC487EFBC6103EA05B1B3B851249F6AB8BD450B4A315B422828CA65D5E97C9BF3B700183377CA9F8ACB1F206163FA4E121ABE4FF24EBEB2BE5F40239258B060C95C8F2C1F12D90C6403768D9C7A8DCCBDCBE19F0EDC24A7651AF422FE03CDF1CEF8015E1818A626341E2A5E21F5805319BB809C0E721030A6A03FFE57E72D88C1E864B0FE6344878D0FFDB6464CCE767BF7A83F916092DB018ADABC1EEF51306BFE02A3518D70997DD09F6EF45A4F0543095EB89D8495EE7CE136945B1C3EC0B71B7A0A44E0A6C21BAB7D2E75010BBA76E435B9D5B8DF312405BCD3432E585405EF270A816607FA42BB7E36A49311C90FA83A63E9316138ED71CFA859644AEAD605B52976E6EB4ED699BB880EF8F9FFCDAFA645576064EE96AF2DCD7FF49BA3662F5F73BA8134D6EA479538F9C34FC1C88DE27FDFD10354520FDE6028D48858586343C506C80D3880E9845CB381681819D4DD67BD3910D41506AEA92FFE9F376178A716975D78A5A9F3623E1751A479AD9E74B93D904F7393B1779DD98FD95DDBA1F40474B1FBA112E36A39B0545036D320265D8E7EB5B27A2C264900580137FEE857BE8BDD57EBD459035C810FAA71A84C5FBF9E9D86E522960DC13E9DB784747ABFAD4AD5E88FE6E33B96DBC16BDEDE6A8435DA396E628DE519F64549E946B371172D4A21AE5D2726388B3826147439629817EACF1C92EF604BF0A55E6767E7DBA0CA49CCC14F25AC790362774D966A11019D3AF64FE116C73AA58B4A3814732DCE9A1FBB26286A245626659406AEAD8C9E73942D0D7E28F1EC6970F625AB99F993E5BFF9200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/VFRGTN+Gotham-Light cguidfix
/F1.1/VFRGTN+Gotham-Light renmfont
%RBIBeginFontSubset: EBNZFU+AbeatbyKai
%!FontType1-1.0: EBNZFU+AbeatbyKai 001.001%%CreationDate: 11/27/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (abeatbyKai) readonly def/FamilyName (abeatbyKai) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -133 def/UnderlineThickness 20 defend readonly def/FontName /EBNZFU+AbeatbyKai def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /e putdup 34 /x putdup 35 /u putdup 36 /s putreadonly def/FontBBox {-17 -204 4624 801} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F183746CED7CBF1D4D53E396DA7AD2997AB78F1B93B669291EA31318C6EA26508C01C5A7E4CD71A280D390A1BF58BDD995DD07607F60764639AC61C97544C7A6B3CA5278FE2F0203D4A141707F53713184DB74022DF34DE94E44B454E2A0DC6006CEBDC1C922C2C4FD7A5AF6ED4CFDAF7D20AF4D35E4C39DC2B6D5C1721352433224DE809D46187E91AC4555A1C6D255AEFC7A3024AAE1F94331F9740F96E45C4833E9E66823DDC04888845646CF5B8605EEC217F184FFCDBD6CDA5242E18F76080F02E39AD60FF920BB1F3C858FB9F0A0E2C6FE969DD647FDDCE6AE846A0527E45581ECF8D229B9005BCC99A147C37E3DB6FCD695EE0A861FD3611E12B4B739488C1E0FFB7EC7E212215EFAF352C8B3FB4E3B3A3BAAB5853F9C0CE4D3596B9159EE237C2C5C95B8357C47EF114CF2A03A9E8DB851ED074A77F56E5170D1C292D756F0DD58D2D0C2C41D6411B78634D3C07BE71084BE2942F27DE77730D638990578B5F1286CE992F57703B7FCA349EDD7CE88565D916FFF88637AEF2B1E67F6B97F21EABD05E1057FDD82E056F6CC2C4615173A4B151B013D91BD2115524F06F256092C96EF97501DD24123E07145ED25D9CA260740993D31C2644F7C74049E86EF08347437B6B5D672E255564CA98ADAC39E97874BCE3DB88857336FDAB29A6F0C59FFD7F97502A1CE2E42AF020DEBBAFCE57563EF679BA89C9F0A53DB1F1E24A39CBB4B11089CCFCBBA2A1E8E5FB1E166CC067EC637BB2E605F933DAA2E9C80569C6C4C287464134554CD21697C444A08EFC65E23B231FDCBB129CE1BE1327D1A9FB7E09B1AF7E72F770E2B2B7D7EE8EAA67C28C3858C05659F1E1A0608A9B16B66452873BA11748A882D30A41BD3B894A42BE8895CFB51512522EE20AA816B6918D1DE8D6484965A9DE4A82BB8B373D2C62303B979A6D11E90BFEFE210BE952224F6E9037DB080230475584E70E016509DE85222905E902519B82C1840F09BCF90F181931EAD7F300EA1B51260CD18ACD1D723906B3088E31F958D8A6A00F3EE41666B3F7E983363350B4F5733F7D177F44EF1CC43E48096109B3724301BA2003383B8D0A17C5ADC49A1DEA46BD7ABAB455CC30940CE8A8DD02589DEEAC613AE3F3DE517CB5E4EB3E75BC4558DFC423D18D05FE009938A29885D08DC2909F94EE30806938A1582AB0F8CFE815BC4D82F58E0F1A762885559756EE8F6A1F84759D97367DA5535771785E0344316FCAE55617D985CE7A8E3F6A9F609DEBAF69D57E0EE660D8076D42B9DDB4A01FD2EC29C9BD41AE3A15236967737C5AAB81B4E25045C93C15BECF7C25A34B39DCE8925F6045AD2108C8C7F0520BB2B4B29752224863BC5207AF7645AC5EBF1E7BF6BDB55171D17C682C523308DBC5459C5F7DB0FE23A35E9BCA77A87BAC2384D8299A3807AE01938FCFC5C967C14C025102FE1A0CADE58402B99C7D482BB923A1B37927A74C7EF5E3A76AF84048FE5248B5B1FBC8137A453DB8C32017DFF4103DE9F89FFC42B074FE3295EA78C69A78CC11B9944432F51D7D4459712B236FB7EBD39E1A3578705117181F437F385B9D76155FA33432DDD301D18B6321EBF1936D479E963A3C5B184FCF5F92244691922B18917EBE03111478DA2F649432AA5ACB3033DFB52485E9A705586DD73FFCD843DC14EF793A548371E6C5C961B57E4D1C7B54431E2C88FC9F23941D103BF938CDD2419F3407A0B4499AC125F0EBA028B13AF944AE01A5A013991206BC1372F4A7C956A8F074DA2568133DCDE495FE06A7A3BB84EE38D0D20B9595D258B7DB9DFC514508CA21AC693DE3556FCFB1183C49FC9EA91C49EAACA8C320745B4095B74CF28C316F8DEB155401881D27022214B995E29ADE43D7861110DBEFAEF8CE689EEAF887E810F054E148B103735B78E4FB8F31A66550A736E8174E2DACF875A4E566FA49E4710AA37FDA3547F229CCACCADB6E3B42703A1202D64F410003075397BF6D63B8AE04D338C5EC9B17E4523F43E9C2EC192779310AD69BCE094B2A146EC0F425FF579FFEB36F9B47AC37EAEEC6BEF6D593A1464A09E3C017D6FDD658162723E1CE088AE5FDFF53D9F0EA214FE9BE8ADC9F989B07CEB5AB7AE0D202F7C0215683F9FD4FF74720863CFC2591BF6B90EFC8AD31FAF8D56C84EADF3192A28F0F7C4FE9194CD7DFD8697800072D9B4FE73DFA13B91E75E2A41603B0FB24898ABF02F96C52E7466B119A10267D4A089EEBD57071C232267A53A070D045F061074272552754C00CEBE0913C4C67CFDC0D89150D4B06C85883668DDC4625198BD0D216CC850F81701DA17E694AB36E25404954E199FDBD7BAA0357F9E596D8DD0D57150977E79B568D60F8287CD93E9F7EE4E3E08A883EEF0BC2047490C1D6077F324F8686E2BDED2C1E9FBC3DF9403C0C678112ECFF43B7858CF334026F380A03C3F46E2914B74252AB4C86CBD0CA96D3C105C6127E96EE0F02E4B562F762D36485C42071D47A33CEACE08F7940F2A4FE2E007D59DE543DAAF74734725E38BBFB2254034E5C6C5271A6BEA828FBDBE104CD4CF9E57F22DCC4DB8E97828FE8B20341429B22E216F9559CEA059E51F235A1C38D492F37E3CE9BE1216C5CEC9A7A9D8E7B2E207C38886CD6EC4E4D2D3C4B8F95B61D833A8A03416398702D6A27103EDE108B776BB6B821454A5D9043361B2E8E6561653ABFAFCD49170131D1D61C0CDA6BD52A9A8DEF147FE233944ED5E4CC8032C903DC5027DA17FCD1C26E8F0C1BA2F4D53C27BEAA951E8C588BD2AFE2186D5F17A800E20941A82B04529EFF988E63F9998D9D01FE083A978055CBE01995D51FF72197A6618C89F9E3C77D2F8AD70BD3BF8C36462C4773B680A47BBA3A30B6A997D880BE1AF541A728F9659B67B1559CE55DF9CAD8B92B4C7A6F0B3E0DBAF8437DC595C1454911EEB42A3EB4C49E598752AA4A0D390C4E99CB8B8642A9498BB9387514780720369A2193AD84912188FCB1700D4AA937825A7DEFB6872CA9A6BC3D52DB97082F475D49431B5E78A2B95CD117A3AD7E7BABC4FA36792E52377F5849B9F586DA95507598953372FB2A06F5E6A1E1F30AF9D4BEFFD35808D7828DB09635EB2E3B7543A6B1384CDA9978CBE8E6E659388045F51FD3FAF78282E11866E4CDC5CA9CF166385E0D2F89B206BA98F60CBB513103F6A78DF400E1E43536BF56B09292C5C089013CCE2ED64D602E84DF2F705880758669D1CAC96D648473161EC9E17F0D5DAA34C80CB55E3E0AC23C23A790DDEF1E93AC5D5B89C3CD5F7920741C7BAA920F8F956BE4F61B205A5C53841328943C31ED74E7EBC1F9A90BCCCCC5B9A570DE300B3B82A691D146304904DD01BAE11E184C965F4D13FACB526D117458005DABEEBB4E5863FB73048648BF40726B0CE3DBCAD4D5DF2F5E51C9C1D7A102AF0DC887DAEB14D290BD1908CA4C802E98264B2B724EF19675E909C4E9219C21B304BE3558CFBB343A0B897BBAD2DB65CECE401DA1C2CA972E00448E90047901C899380B15BF04E9D86EEEF75B8E68764A38370AB993B9021B1EB0AAEA149DD0921C0404B7EE02FF781F869DC6C7B7B37D0EC00F0602C9B81456C5893476B8AEB46CA291E8C23ACA7939C16389B07077F94BDE0E94D47841185A3B2A964BB7D4FF4481ADF2B66AD05897D3B51997F05462F9EBDAA21E5B67DDB46B2A8B5AC5F8A652FB8C00365AF7E10F659F992CA7EEEB55E20B38C400DB211D25E1503C110E679E3CB5E5ACA002950A8FB40908F358B4A381237A753C42F988284D9BDD3B43F54DDA9F73376AFCFDCC304BD2879F94F9F9C89D13C8F570D32FCD78987828F7B9473055A807F4A0D2CC3535CB662E09EE39141AE6CF8C38DDA54A095E64FE436590F4D561C739A0F03BD725026152209F419F057695258AF6F4DB8BF0C444F29D9A901DB0D7F1A576665A410F71CB8563D59C9B338952BB8C494DCE8465A1A2722EB8FD57005C8DE7D49766132C1CD9773F12FCD3846CFB51A73B72930605CCF617BD75C7B3CFAD31BFA342FF2BA720C56E630BBCED994D8D6A74B531BC02DCF02086A71A120C449BB7973220086EBAD2F363C841139341E8EE50B6C79DFD89F32CCC678800016192C52A2BF15A3ADBFEB71B33CE7CB61E63DD8A93B8E847EA86518466CD79F19BB28583EE01B46654ED3F5D1DF01839D713B17C0EF5851806705F4C1CC12979D0C87F0A938D8476C118701405381B9FB34D5783215D5C92A633ADB5601C5418C10C8D9E2AFF0DD3EE6CD5839F94277B4383863F2F2F307FB1BD0247DE70F71D549FB38DB4E6AF8009F45DED2D37D00C107671A64F8E615C7909421D0230C3A7284C5A010C904F8C37C668173E50F7A27DD4191F015CC40692845CDEA1B949419E04653CF0C809F21BF4DEE97BAD8A5FECB1ABD577CAD30CB4CAFDC54E6754DA69990830820B23BAE9A1DE54A7319E0D3356AEB1C5774153DC2A4AB68F6A8FBE2DB6C8FAF3549E7A876D168CE38968AEF4A4B675DBA9AEDFDBE0AD88741F992A23AFA1EF4EAAC22E126C257F55710183BB8E6E3C6D1D40430F2C8B2C3A64D69C582BA7D5498D2526EAA060F7229CCE50997EE2DA11023F9F51EE2FC5EB86072D2AB49680A5E7680691354D13D7AAABFDC728F4E8FAB7A1FA1F4BBF9DA2EFAB62C711313A839AE9744BCA3A2C7E661C574E85423541B5626F4B78DD26E8CE6C701E731694460DAC94DB34F9945A0636639FB653D8CF1250A00F15484360690086237FDDE3C253B8BD4CCFBF447F6863D12AA29D655045646AC7A59F6AC5412B896C194018F9FCFD99EB6179078924F100E94F26339E82118A97BD65352B54E5F84DC5C6C0F010A183A2D9A610B5F142B33F59E959B0A8F6E7817E8D167E947AF8760718EAC17B94E38CF6505925C4FBB3AC4549D3C0EA68B32A9AB8BA37EAAE1C9BCD9CB6B8CCC4ED1B18259CDEFAF683095F499B3BBD331E6C0037DADAEDE3F99E3BCAE31608F41BA6B693907F9164AB45BBDAFBC4302E1459CCBE28B2AD27E88CD52FE3AF9F84AAB778EAADC52F8F1F93A970071CFEAF6CC334F7A5216DCB33E71DF588876DE862B9044208C9F26079442C031F225EC9E81BE17220A48759CE5999EBCEDFCC090BF997B156CE68C29FC7D88017B6C9830BC971816C2869EE2FC5ACF8D37AC50511FEF7162821576E2F22E20922B11FCAC927A63ACB9FA9E0494D6F495EBF5E185D99F491A1C77CF0C677AB6DAAE7EC1263EA00244B1700A84F2B7E21540AEFEBD71985F89EEB839A58EB55687D81731D155DBB62CE29EEFD34DC703723428F728CB22724FF80C3730C18BA059D697F6D2778BBBA3EAB3ABE8DE424C3D0C74F895318F70B547CC3A9AA76B61F9BD52446F254047FABEC031CEB372ABE5724CE80401D64324FC99E500787ABE0CAD583553BFA75FA07782476A7B7AD294864941C4D19059FB0FA07DE36FCA02B5CD6714CA3D83CC1134B46F57269BAAAFAD9BE23E64DB956EE49AB89A5669C927F75C9DB53C900E93C7D6A9A21E26C6C6C54F2AC62627F07FF7510C4ECFC015A32066E80284686BCD7E8F6480F665C8F94A8BE9930DCBB9B9A67FFAF64E4E43BBE87E6593588B01186D2025E15ECB982EC680062F128A4CF9A52B55AB66586E68C0BA56C938758CC363474B78D412B322B791A5907513532373477E49E796192CCAB869B7A761D335E824E05F1FCED8834D4C4D975B8A317ED004A2EF9E7909480E4B6CCA0B883EE8DFC0F551147886BFC39B2303F45306F1CF507E5BEDC0A2286A2B11DB1A25E66E5BBE77D20ED456FC2D6966E8136913DD98BEB1F16FF6180A1C0C61821620622A8F9449CB881E76E1B5C0E44EA7512F613D027C758BA7B788E9BD1E7F5F0F2DF5904446720F1D001BB2D3187350D56E1111232341F1DDC2A2BAAF3567D62A72479BC22AAA9126339EFDB359AFB795D2DBBEE05934843AF53AC577B9C1E668AA0EDF3FDF7F98340AF291A4C13D6D75766FD98FE06AE03530D2A53BA692CFE73B5CF907AA642FE56513C254A3A7ECDF844B614C9E6FAA1D05E5C74B57B938FD39FE5E44CB2C4EF3E2DD932C3B9A740DD03018554F8B6A534935B5B434A376B205FE7617E5E1A9BB5F6B917EB25F3237590E640786DE68EE28400E434FDCEEDDC65E8AEF71264E85A2566709B1D92649C1133047EE388E39635AAD82321CCF51DDAA2F1379F6EB26007947203DD22E1E60A0C1B2AC091B1C73A99DF158966819CE72DD2FBC8110ED2BF8CEC1D984E3F20608A2320E2CC8D8391E005655AEE37B4A4A65B9B25B7B3EB477114EC6574EA166230986DAC03D1BCA4E0C554D9518D9F2D20626F7822DEA78272791ACDB916627B534D1370AAC03B2D3B89D875DEB4F8CB3C5B2508200BEF14C3E010E566AAE62BABE73CB40FA0E7E6D0B443C8C0556805B420614DA77314D3434B3EF396933C4155593A1AD0AD199FA3CD47FE2B6589EF76B3187025292C0C39A87B66426D6F8C5EB63A9B2B1B5CF5F4400008452AD2BB027B337891DA9BF3C4DAFF3D8DD7DE57BA84FB80A16BFD3F8BB2D68404F7F03D03CF6E9EFB33CA471F4A24D7285EDED96D309E84A6C152BFBAC6B51A80EAC486DA50B5AE3DBBCA8FA95E9D882E5C3956793896000FC52CE707205C580BF1020CFAE1D29E81E407256451D5801310647652ADC21E04101141EF26881806AABACCA4DDB71293292663016FA9516737253632259658175ABBBD026DAD701FAEB6BE910A06300E389056B2356CA56EF1E519BB7CE75B54287158FD1338909E8C73A928083E4CC56649CF295DEEC2B50394AAF64952C9DBB240EA52AD2489F8034772EC24CEFEF7F9733873C3B38A9806B5DA84375375F4AF8D0ABA3F83E25B36CC8BF9A128FA32D3430010B6B181138D677A7E1469ABB97D3844E912C7F3D1407F24BB6B9E03C1AB890623B7E24CF240BD400549AA237E0D0CC8F85F31B8101C9CA1E51244183C9E49A5683537D674566A22A459FC25B5F3C420D3B34051CBA74CED1343A4CB238B18139CE25B453FF62B119282B38E9B1C4E6DD186CCE4757C26AA7235CC2C0937CA3A0F5DA53D54A80097467560C8BEE375255142F5F78D02AF18E5E0F2B52867197E39F8603A001945A97D76CAC4B418C28489B1555C78D0F7725B904FBA2CCCCCCE27C43274A820DEA2AD39629C4014F8E6A3722E9C1CF475D76E1178894E9ADA645DC772F472EAC166C44FF5C8BAAA689F3210C443CD4A6A59B98EA68823A334B19A4CD1C72D457F135E9A0F4C4D628E77150B0FB502D1B5973F127E11E6F442B36F3322C875CA2CB1F3B469962159C3B77AE15A50AB457F3FA5A10A3C986B22F8E154C1E564A55D3734A692C214D9041D199C05408F6E65A13F8E03DB9DB1EF8B5B578F25D7F108C0A4FDB91121399A4539C4C0ADA574D0113049E92D4AE1D53FEC2A36DCE84BA41107E1368CC98F6C4D4D3A8BA79B5447EE26B01C6032258F3BB5D7FB3806525B2C657AC310DCF0E33057457B80543D7F7D5D17CDE3B067EA16890FE6232462694FEEADBCC254CCE3D6AA59CA1E022AEC78952CE65A8B056387C56673662CA97117D65F13EA0A0F6B2476766DE06C2EF26E68FBFFE683F617A208ACACF57CF4652FF4F7D9C5671DC64D8160A97D7EE0C41E856F9041C7BF5989176BD064050524F641DCD2FE5554FB4731973C7F79A9E1F4C27782FD22587704849393901C61BD06FD3A0912B5D9486B5C8F6C50D506BF4B4C09E195C19EE27B1E2B87D39591A63E7305A6BFEAAEAC47372B8C411F31BCC5DC076CCFEBD0E3054502372C09780A27034459217D4383D9C41F705295AA752EA173A2DB6CE3FCB50AEEE76A106CC306585A13CA52E03EEB7EFB947F6EF3980D6E3A941116B0B56C2B3A572A1A0A1E49734B31E27D435A56F7274195CBB7093580E203E2F02FEE652225393D1D07820CB5BA2B23E8D34A5CA226951A945D4677FB9384FCC80431DC83028A7FCE03B5D44509552600C44377DD5679A12DE21AEF96EA0127333DE1246AC6E585F1B5A6069B0E090905F3164D8F93A0FEA878B73D78F5BECDC098C7D0115A69EE1226135A281AA70A4E9136AFB132D769A613AF42ED54BB57EC91FD00E5ACEA9E35579C676D04C9997624E45A333CD5C1095EAAECC119C3599EC266A319050A818C064650E00CE8CB011510351E81E6181B2D8FDB2DB3537A3DC72BFDC968B4071A9B9C39F6ED4085FE33F39C5AE87D27E2B9A42CD15B6627DCC448BD0603E230CB599BF86275A3803E2935622CEF86F25A62846464B25687248B6681DD5F2868C4D886E3E7045C9E7D9A60C4BAB724016451376CA35F692769874A123BCEF3FCC98F07720E33435654916737E109CA38E4F2B5F5D7757F11DCF7A528F382B74CB2830E1FF0575F1E0E7BA51B92096910C1F35CD39618DC38A2726C0CCC1D10E8ADB6AF12CA2D16B20E7D4A57224B13170C93CB398180DF03C3E2A6AD67009D3139A937D6CFFBE552A043E1EC12AA8C1E30BBA6F97D685D443A462687833EB326731677D643693101328567130890CA97746BD6642122DF1EF207B0D2690045F6AE4D20B9FFBCE6792B85B17D041C7E7D303870D85BA6D3535C920A0833523E7795B644E26090A2EBC4E954EEFD498A14DE12C0FCF74F6A25DFEA89087BAD7DDC2625FD542A03A73E9558ED22254B1B0C59425D74EF074DBF88E507B0D0B702EC3B33EBCFB1170C9F02F36E8C30ABA4BD98D4C1A220A3B1458EA90D6832922187F902F0E1D4898934C70ED1DDF3C0103A689942F25AE4F481E4D5714FB794109AF37FADA5D5CF02647F5E8EBE9275C066B8417E20B838174DDDCF4011BDF4F450FC1E3C2614AB00956457849270C372B7E3562DD7534F62CDDD4F12E9903FC8FE26F87E20A84BC80692846448B2425B8797510F1336D9CD2803B26789BA3E093EA37A78A43204B1C0AB1A846396C38CF3641BEFFB236C1CC75B5A9327B3BB937700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/EBNZFU+AbeatbyKai cguidfix
/F2.1/EBNZFU+AbeatbyKai renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.23137255 0.24313726 0.34901962 sc
q
11.240982 30.293844 m
11.032255 30.333767 l
7.6136384 30.978247 6.0876722 31.517212 6.0876722 33.00008 c
6.0876722 33.986759 6.581284 34.719639 7.596715 35.235794 c
8.8067694 35.851753 10.250937 35.917343 10.809424 35.917343 c
12.679509 35.894527 14.563697 35.62077 15.686312 33.792847 c
15.759648 33.673077 l
15.824523 33.524788 15.906322 33.387909 16.007864 33.268139 c
16.061457 33.205402 16.11787 33.148369 16.179924 33.097038 c
16.453526 32.857498 16.808926 32.712063 17.195354 32.712063 c
17.545115 32.712063 17.872309 32.831833 18.128986 33.031448 c
18.227709 33.114147 l
18.549261 33.396465 18.749527 33.818512 18.749527 34.283333 c
18.749527 34.39455 18.738245 34.505764 18.712858 34.611275 c
18.681831 34.779526 18.619778 34.936367 18.535158 35.078949 c
18.512594 35.118874 18.487207 35.158798 18.459002 35.195869 c
18.301044 35.43541 l
16.3407 38.395447 13.892385 39 10.820706 39 c
8.1523809 39 5.7435541 38.158756 4.3755436 36.747177 c
3.3883193 35.729134 2.9003484 34.445881 2.9313755 32.9459 c
2.9313755 28.771051 7.1115646 27.944067 10.473768 27.282478 c
13.83033 26.632298 15.864012 26.096184 15.847088 24.134232 c
15.847088 21.356703 12.33257 21.057278 10.820706 21.057278 c
8.7926664 21.057278 6.2371659 22.058214 5.2809691 23.968836 c
4.8917208 24.74449 l
4.8705659 24.733938 l
4.6353245 25.079847 4.2737184 25.330509 3.8506222 25.404652 c
3.7634645 25.422333 3.6701012 25.431173 3.5770202 25.431173 c
3.3268292 25.431173 3.0882032 25.372429 2.8786294 25.263494 c
2.6749792 25.163401 2.497561 25.019392 2.3548365 24.845724 c
2.1336985 24.569113 2 24.216076 2 23.836803 c
2 23.657433 2.0310271 23.485762 2.0854654 23.324642 c
2.0792601 23.321507 l
2.106056 23.267324 l
2.1435707 23.169226 2.1898291 23.076262 2.2448316 22.98843 c
2.4682264 22.539862 l
4.1408663 19.191999 7.8782148 18 10.820143 18 c
12.241746 18 14.300813 18.196766 16.035507 19.137817 c
17.962004 20.184381 18.985897 21.901087 19 24.108282 c
19.000565 28.785311 14.699087 29.62085 11.240982 30.293844 c
W*
0 0 99 39 rc
-3 44 m
24 44 l
24 13 l
-3 13 l
h
f
Q
0.098039217 0.60392159 0.69411767 sc
q
94.894997 20.849688 m
94.768234 20.876562 94.632942 20.889999 94.49765 20.889999 c
94.134117 20.889999 93.787354 20.799999 93.482941 20.634062 c
93.187057 20.481251 92.929115 20.26125 92.721764 19.99625 c
92.400589 19.574062 92.205879 19.035 92.205879 18.455313 c
92.205879 17.116562 93.233238 16.025 94.497353 16.025 c
95.013237 16.025 95.490883 16.209063 95.871468 16.519062 c
96.015297 16.644688 l
96.488823 17.084999 96.784706 17.73625 96.784706 18.455 c
96.785004 19.654688 95.964706 20.651875 94.894997 20.849688 c
W*
0 0 99 39 rc
87.205879 25.889999 m
101.78471 25.889999 l
101.78471 11.025 l
87.205879 11.025 l
h
f
Q
0.23137255 0.24313726 0.34901962 sc
q
88.28035 28.654568 m
74.215515 28.654568 l
74.130745 28.644995 74.04937 28.632229 73.967995 28.613083 c
73.503456 28.510969 73.106743 28.239729 72.849045 27.875948 c
72.842262 27.866375 72.83548 27.8568 72.832092 27.847227 c
72.645599 27.575987 72.537094 27.250498 72.537094 26.902672 c
72.537094 26.542082 72.652382 26.20702 72.849045 25.929398 c
72.943985 25.798565 73.05249 25.677303 73.181335 25.578381 c
73.401733 25.393299 73.672997 25.259274 73.967995 25.198645 c
74.018852 25.182688 74.069717 25.173115 74.123962 25.166733 c
88.538048 25.166733 l
88.57534 25.211409 l
90.840363 25.195454 91.711784 26.312326 92 27.489828 c
91.728737 33.833664 86.337448 38.907459 79.688187 38.996807 c
79.627151 39 79.566116 39 79.505089 39 c
77.989418 39 76.53479 38.741524 75.18866 38.266056 c
71.146889 36.836456 68.085037 33.463501 67.23735 29.327883 c
67.081375 28.5716 67 27.789789 67 26.988831 c
67 25.147587 67.430626 23.402075 68.203712 21.844835 c
68.21389 21.822496 68.22406 21.796968 68.237625 21.774632 c
68.539398 21.168329 68.895432 20.590746 69.298927 20.048265 c
69.31588 20.025927 69.332832 20.000399 69.349792 19.978062 c
70.62471 18.277224 72.347214 16.911448 74.357925 16.037096 c
74.36132 16.037096 l
75.988876 15.363781 77.826668 15 79.810257 15 c
80.044212 15 80.278175 15.006382 80.508751 15.015955 c
81.461548 15.08935 82.383835 15.264858 83.262039 15.532907 c
83.289162 15.542481 83.316292 15.548863 83.346809 15.558436 c
85.333786 16.104109 88.005699 17.198645 89.762108 19.349422 c
89.796013 19.390905 89.829918 19.43239 89.860435 19.477064 c
89.928253 19.572796 89.985893 19.67491 90.029976 19.780216 c
90.043541 19.815317 90.057098 19.853609 90.070663 19.891903 c
90.118134 20.038692 90.145256 20.198244 90.145256 20.360989 c
90.145256 20.453529 90.135086 20.54607 90.118134 20.632229 c
90.118134 20.644995 l
90.111351 20.686478 90.101181 20.724771 90.091011 20.763063 c
90.087616 20.769445 90.087616 20.772636 90.084229 20.779018 c
90.080833 20.801355 90.074051 20.823694 90.063881 20.84284 c
89.867218 21.420424 89.324699 21.851217 88.663506 21.921419 c
88.629593 21.927803 88.592293 21.930994 88.555 21.930994 c
88.538048 21.930994 l
88.514313 21.934185 88.49057 21.934185 88.47023 21.934185 c
87.951447 21.934185 87.486908 21.71081 87.178352 21.362984 c
86.886749 21.063023 86.544281 20.779018 86.161125 20.520542 c
85.598267 20.137615 84.94046 19.799362 84.228401 19.524931 c
84.225014 19.52174 84.225014 19.52174 84.221619 19.52174 c
84.211449 19.518549 84.201279 19.518549 84.191101 19.515356 c
84.187714 19.508974 l
82.855148 19.001596 81.32592 18.708017 79.810257 18.708017 c
75.887154 18.708017 71.719925 20.973673 71.255394 26.02832 c
71.214699 26.5357 71.180794 27.394096 71.245216 27.710012 c
71.255394 27.783407 l
71.309647 28.335461 71.404587 28.861986 71.540215 29.362984 c
71.774178 30.25329 72.140381 31.076586 72.625252 31.81053 c
74.147697 34.104908 76.768753 35.422817 79.810257 35.422817 c
81.271667 35.422817 82.570328 35.205822 83.685883 34.794178 c
83.77404 34.762264 83.85881 34.727165 83.946968 34.692062 c
84.041908 34.65377 84.133461 34.615479 84.225014 34.573994 c
84.238571 34.570801 84.248749 34.564419 84.258919 34.56123 c
84.367424 34.51017 84.472534 34.455925 84.577652 34.404865 c
86.829109 33.272038 88.43293 31.153172 88.738098 28.657759 c
88.28035 28.657759 l
88.28035 28.654568 l
h
W*
0 0 99 39 rc
62 44 m
97 44 l
97 10 l
62 10 l
h
f
Q
1 1 1 sc
q
53.029999 39 m
53 39 l
53.02 38.810001 53.029999 38.619999 53.029999 38.43 c
53.029999 39 l
h
W*
0 0 99 39 rc
48 44 m
58.029999 44 l
58.029999 33.43 l
48 33.43 l
h
f
Q
0.23137255 0.24313726 0.34901962 sc
q
65.585587 38.930641 m
65.492493 38.948734 65.390388 38.960796 65.29129 38.960796 c
65.021019 38.960796 64.759758 38.894455 64.531532 38.776844 c
64.309311 38.671299 64.117119 38.511471 63.963963 38.327522 c
63.888889 38.234035 63.822823 38.134521 63.768768 38.025959 c
63.738739 37.968662 63.714714 37.911369 63.693695 37.851055 c
63.67868 37.829945 63.666668 37.80582 63.654655 37.784714 c
63.534534 37.48315 l
61.885887 33.3367 l
61.864864 33.279404 l
60.67868 30.233644 l
60.62162 30.082863 l
60.618618 30.085878 l
60.333332 29.395306 l
58.720722 25.465977 l
57.00901 21.295399 l
55.279278 25.505178 l
53.666668 29.434509 l
53.381382 30.125082 l
53.32132 30.272846 l
52.135136 33.318604 l
52.114113 33.3759 l
50.465466 37.522354 l
50.345345 37.823914 l
50.333332 37.845024 50.32132 37.869148 50.306305 37.890259 c
50.285286 37.950569 50.261261 38.007866 50.231232 38.065163 c
50.177177 38.173725 50.111111 38.273239 50.036037 38.366722 c
49.882881 38.550674 49.690689 38.710503 49.468468 38.816048 c
49.240242 38.933659 48.978977 39 48.70871 39 c
48.609612 39 48.507507 38.987938 48.414413 38.969845 c
47.612614 38.82811 47 38.125477 47 37.275074 c
47 37.151436 47.015015 37.02478 47.03904 36.904156 c
47.042042 36.901142 47.042042 36.898125 47.042042 36.895111 c
47.060059 36.810673 47.087086 36.729252 47.117119 36.650845 c
47.117119 36.647831 47.120121 36.644814 47.120121 36.6418 c
47.318317 36.14724 l
47.318317 36.144226 l
52.777779 22.444342 l
52.777779 22.435295 l
52.807808 22.359905 l
52.81081 22.362921 l
53.201202 21.428085 l
54.822823 17.547005 l
54.822823 17.543989 54.825825 17.540974 54.825825 17.534941 c
54.894894 17.369083 l
55.138138 16.838337 55.573574 16.413137 56.111111 16.183952 c
56.390388 16.066343 56.696697 16 57.018017 16 c
57.336338 16 57.636635 16.063328 57.912914 16.183952 c
58.096096 16.259342 58.264263 16.358856 58.417416 16.476465 c
58.564564 16.59709 l
58.786785 16.790089 58.969971 17.02832 59.099098 17.293694 c
59.22823 17.598269 l
59.22823 17.601284 59.231232 17.607317 59.231232 17.613348 c
59.240242 17.640488 59.249249 17.664612 59.255257 17.691753 c
60.798798 21.388882 l
61.18919 22.323719 l
61.192192 22.320704 l
61.222221 22.396093 l
61.222221 22.40514 l
66.681679 36.105022 l
66.681679 36.108036 l
66.879883 36.602596 l
66.879883 36.60561 66.882881 36.608627 66.882881 36.611645 c
66.91291 36.690048 66.939941 36.771469 66.957954 36.855907 c
66.957954 36.858921 66.957954 36.861938 66.96096 36.864952 c
66.984985 36.985577 67 37.112232 67 37.235874 c
67 38.086273 66.38739 38.788906 65.585587 38.930641 c
W*
0 0 99 39 rc
42 44 m
72 44 l
72 11 l
42 11 l
h
f
Q
q
38.97887 21.780926 m
37.538216 20.112423 35.465435 19.234423 32.992798 19.234423 c
28.4709 19.234423 25.189732 22.689098 25.189732 27.450216 c
25.189732 32.19323 28.4709 35.629803 32.992798 35.629803 c
38.476112 35.629803 40.972271 31.381609 40.972271 27.432114 c
40.972271 25.271809 40.266644 23.268398 38.97887 21.780926 c
44 37.348392 m
44 37.410244 43.996471 37.469383 43.98912 37.528519 c
43.98912 37.542698 l
43.906799 38.266823 43.362877 38.852158 42.674889 38.972847 c
42.583748 38.990948 42.489662 39 42.39558 39 c
42.13979 39 41.89576 38.939655 41.681129 38.828022 c
41.472382 38.72242 41.293037 38.574577 41.14603 38.393547 c
41.128094 38.370918 41.113689 38.345573 41.096931 38.322037 c
40.936989 38.096958 40.82732 37.831444 40.795273 37.541492 c
40.786453 37.47813 40.783512 37.414772 40.783512 37.348392 c
40.783512 37.28503 40.786453 37.221672 40.795273 37.15831 c
40.795273 37.156803 40.795864 37.155594 40.796158 37.154388 c
40.796158 35.306965 l
38.961525 37.536667 36.165474 38.81897 32.993092 38.81897 c
26.724766 38.81897 22 33.934147 22 27.450216 c
22 20.921028 26.724766 16 32.993092 16 c
36.109612 16 38.826279 17.2642 40.796158 19.599501 c
40.796158 17.749363 l
40.796158 17.747252 40.795567 17.744839 40.795273 17.742725 c
40.792336 17.718588 40.792336 17.69445 40.792336 17.670313 c
40.792336 17.65221 40.792336 17.63109 40.795273 17.612988 c
40.821735 16.734985 41.527363 16.028965 42.394695 16.028965 c
42.753391 16.028965 43.088566 16.15267 43.353176 16.360855 c
43.456078 16.445337 l
43.531933 16.514128 43.601322 16.590464 43.663357 16.672832 c
43.848877 16.919638 43.967072 17.222261 43.98912 17.550833 c
43.98912 17.56592 l
43.992943 17.600616 43.994122 17.63652 43.994122 17.670313 c
43.994122 17.714666 43.991474 17.757208 43.98912 17.800957 c
43.98912 37.162533 l
43.996471 37.224689 44 37.286541 44 37.348392 c
W*
0 0 99 39 rc
17 44 m
49 44 l
49 11 l
17 11 l
h
f
Q
/Cs2 SC
0.23137255 0.24313726 0.34901962 sc
q
0 0 99 39 rc
1 0 0 -1 0 10 cm
/F1.1[ 9 0 0 -9 0 0]sf
0 8 m
(!"#$%&'\(\)*+,-./)[ 6.552000 5.760000 5.715000 5.292000 3.600000 2.241000 5.940000 5.517000 3.600000 7.470000 5.310000 6.345000 3.015000 5.283000 0.000000 ] xS
/F2.1[ 9 0 0 -9 0 0]sf
74.339996 8 m
(!"##$)[ 5.922000 5.058000 5.301000 5.301000 0.000000 ] xS
ep
end
